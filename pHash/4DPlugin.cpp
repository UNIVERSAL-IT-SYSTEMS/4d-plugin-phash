/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : pHash
 #	author : miyako
 #	2014/06/24
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include <stdio.h>
#include <dirent.h>
#include <errno.h>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>

#include "pHash.h"

const char *int64ToStr(ulong64 value)
{
	std::stringstream stream;
	stream << value;
	return stream.str().c_str();
}

const char *paramToPathStr(C_TEXT &param){
	CUTF8String path;
	param.convertPath();
	param.copyUTF8String(&path);	
	return (const char *)path.c_str();
}

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- Compute
			
		case 1 :
			PH_Compute_DCT(pResult, pParams);
			break;
			
			// --- Compare
			
		case 2 :
			PH_Compare_MH(pResult, pParams);
			break;
			
		case 3 :
			PH_Compare_RADISH(pResult, pParams);
			break;
			
		case 4 :
			PH_Compare_DCT(pResult, pParams);
			break;
			
	}
}

// ------------------------------------ Compare -----------------------------------

void PH_Compare_DCT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);	
	CUTF8String _hasha, _hashb;	

	Param1.copyUTF8String(&_hasha);
	Param2.copyUTF8String(&_hashb);	
	
	std::stringstream _Param1((const char *)_hasha.c_str());
	std::stringstream _Param2((const char *)_hashb.c_str());
	
	ulong64 hasha;
	ulong64 hashb;
	
	_Param1 >> hasha;
	_Param2 >> hashb;
	
	int hamming_distance = ph_hamming_distance(hasha, hashb);

	returnValue.setIntValue(hamming_distance);
	returnValue.setReturn(pResult);
}

void PH_Compare_MH(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_REAL returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	float alpha = Param3.getDoubleValue();
	float lvl = Param4.getDoubleValue();	
	int hashalen, hashblen;
	
	uint8_t* hasha = ph_mh_imagehash(paramToPathStr(Param1), hashalen, alpha, lvl);
	uint8_t* hashb = ph_mh_imagehash(paramToPathStr(Param2), hashblen, alpha, lvl);	
	
	double hamming_distance = ph_hammingdistance2(hasha, hashalen, hashb, hashblen);
	returnValue.setDoubleValue(hamming_distance);		
	returnValue.setReturn(pResult);
}

void PH_Compare_RADISH(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_LONGINT Param5;
	C_REAL returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	
	double sigma = Param3.getDoubleValue();
	double gamma = Param4.getDoubleValue();	
	int N = Param5.getIntValue();
	double threshold = 0.9;	
	
	Digest x, y;
	double pcc = 0;
	int status = ph_image_digest(paramToPathStr(Param1), sigma, gamma, x, N);
	if(status == 0){
		status = ph_image_digest(paramToPathStr(Param2), sigma, gamma, y, N);
		if(status == 0){
			ph_crosscorr(x, y, pcc, threshold);	
		}	
	}
	
	returnValue.setDoubleValue(pcc);
	returnValue.setReturn(pResult);
}

// ------------------------------------ Compute -----------------------------------

void PH_Compute_DCT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	ulong64 hash;
	
	int status = ph_dct_imagehash(paramToPathStr(Param1), hash);
	
	CUTF8String hashStr((const uint8_t *)int64ToStr(hash));
	Param2.setUTF8String(&hashStr);
	Param2.toParamAtIndex(pParams, 2);
	
	returnValue.setIntValue(status);
	returnValue.setReturn(pResult);
}

